
build_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001014  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08001144  08001144  00011144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001210  08001210  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001210  08001210  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001210  08001210  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001210  08001210  00011210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001214  08001214  00011214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000064  0800127c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800127c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000026be  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000074c  00000000  00000000  0002274b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00022e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00023058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c5e  00000000  00000000  000231e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000162d  00000000  00000000  00025e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009afe  00000000  00000000  0002746b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00030f69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c88  00000000  00000000  00030fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	0800112c 	.word	0x0800112c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	0800112c 	.word	0x0800112c

08000170 <main>:
} TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	enable_faults();
 8000174:	f000 f8fc 	bl	8000370 <enable_faults>
	init_scheduler_stack(SCHED_STACK_START);
 8000178:	4806      	ldr	r0, [pc, #24]	; (8000194 <main+0x24>)
 800017a:	f000 f865 	bl	8000248 <init_scheduler_stack>

	init_tasks_stack();
 800017e:	f000 f869 	bl	8000254 <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 8000182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000186:	f000 f82d 	bl	80001e4 <init_systick_timer>

	switch_sp_tp_psp();
 800018a:	f000 f991 	bl	80004b0 <switch_sp_tp_psp>

	task1_handler();
 800018e:	f000 f809 	bl	80001a4 <task1_handler>
    /* Loop forever */
	for(;;);
 8000192:	e7fe      	b.n	8000192 <main+0x22>
 8000194:	20003c00 	.word	0x20003c00

08000198 <idle_task>:
}

void idle_task(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0

}
 800019c:	bf00      	nop
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr

080001a4 <task1_handler>:

void task1_handler(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task 1\n");
 80001a8:	4801      	ldr	r0, [pc, #4]	; (80001b0 <task1_handler+0xc>)
 80001aa:	f000 fb6b 	bl	8000884 <puts>
 80001ae:	e7fb      	b.n	80001a8 <task1_handler+0x4>
 80001b0:	08001144 	.word	0x08001144

080001b4 <task2_handler>:
	}
}

void task2_handler(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task 2\n");
 80001b8:	4801      	ldr	r0, [pc, #4]	; (80001c0 <task2_handler+0xc>)
 80001ba:	f000 fb63 	bl	8000884 <puts>
 80001be:	e7fb      	b.n	80001b8 <task2_handler+0x4>
 80001c0:	0800114c 	.word	0x0800114c

080001c4 <task3_handler>:
	}
}

void task3_handler(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task 3\n");
 80001c8:	4801      	ldr	r0, [pc, #4]	; (80001d0 <task3_handler+0xc>)
 80001ca:	f000 fb5b 	bl	8000884 <puts>
 80001ce:	e7fb      	b.n	80001c8 <task3_handler+0x4>
 80001d0:	08001154 	.word	0x08001154

080001d4 <task4_handler>:
	}
}

void task4_handler(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task 4\n");
 80001d8:	4801      	ldr	r0, [pc, #4]	; (80001e0 <task4_handler+0xc>)
 80001da:	f000 fb53 	bl	8000884 <puts>
 80001de:	e7fb      	b.n	80001d8 <task4_handler+0x4>
 80001e0:	0800115c 	.word	0x0800115c

080001e4 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b087      	sub	sp, #28
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t *)0xE000E014;
 80001ec:	4b14      	ldr	r3, [pc, #80]	; (8000240 <init_systick_timer+0x5c>)
 80001ee:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t *)0xE000E010;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <init_systick_timer+0x60>)
 80001f2:	613b      	str	r3, [r7, #16]

	//reload value
	uint32_t count_value = (SYSTICK_TIM_CLK/ TICK_HZ) -1;
 80001f4:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80001f8:	60fb      	str	r3, [r7, #12]

	//xóa SVR 24bit
	*pSRVR &=~ (0x00FFFFFF);
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	601a      	str	r2, [r3, #0]
	//ghi value vào SVR
	*pSRVR |= count_value;
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	431a      	orrs	r2, r3
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	601a      	str	r2, [r3, #0]

	//enable systick exception request
	*pSCSR |= (1<<1);
 8000212:	693b      	ldr	r3, [r7, #16]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0202 	orr.w	r2, r3, #2
 800021a:	693b      	ldr	r3, [r7, #16]
 800021c:	601a      	str	r2, [r3, #0]
	//Clock source
	*pSCSR |= (1<<2);
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0204 	orr.w	r2, r3, #4
 8000226:	693b      	ldr	r3, [r7, #16]
 8000228:	601a      	str	r2, [r3, #0]
	//enable counter
	*pSCSR |= (1<<0);
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0201 	orr.w	r2, r3, #1
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	601a      	str	r2, [r3, #0]
}
 8000236:	bf00      	nop
 8000238:	371c      	adds	r7, #28
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	e000e014 	.word	0xe000e014
 8000244:	e000e010 	.word	0xe000e010

08000248 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
		{
 8000248:	4603      	mov	r3, r0
			__asm volatile("MSR MSP, %0": : "r"(sched_top_of_stack):);
 800024a:	f383 8808 	msr	MSP, r3
			__asm volatile("BX LR");//sao chép giá trị của LR vào PC
 800024e:	4770      	bx	lr
		}
 8000250:	bf00      	nop
	...

08000254 <init_tasks_stack>:

#define TASK_RUNNING_STATE		0x00
#define TASK_BLOCKED_STATE		0x00
void init_tasks_stack(void)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_RUNNING_STATE;
 800025a:	4b3a      	ldr	r3, [pc, #232]	; (8000344 <init_tasks_stack+0xf0>)
 800025c:	2200      	movs	r2, #0
 800025e:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_RUNNING_STATE;
 8000260:	4b38      	ldr	r3, [pc, #224]	; (8000344 <init_tasks_stack+0xf0>)
 8000262:	2200      	movs	r2, #0
 8000264:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_RUNNING_STATE;
 8000266:	4b37      	ldr	r3, [pc, #220]	; (8000344 <init_tasks_stack+0xf0>)
 8000268:	2200      	movs	r2, #0
 800026a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_RUNNING_STATE;
 800026e:	4b35      	ldr	r3, [pc, #212]	; (8000344 <init_tasks_stack+0xf0>)
 8000270:	2200      	movs	r2, #0
 8000272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_RUNNING_STATE;
 8000276:	4b33      	ldr	r3, [pc, #204]	; (8000344 <init_tasks_stack+0xf0>)
 8000278:	2200      	movs	r2, #0
 800027a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 800027e:	4b31      	ldr	r3, [pc, #196]	; (8000344 <init_tasks_stack+0xf0>)
 8000280:	4a31      	ldr	r2, [pc, #196]	; (8000348 <init_tasks_stack+0xf4>)
 8000282:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000284:	4b2f      	ldr	r3, [pc, #188]	; (8000344 <init_tasks_stack+0xf0>)
 8000286:	4a31      	ldr	r2, [pc, #196]	; (800034c <init_tasks_stack+0xf8>)
 8000288:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 800028a:	4b2e      	ldr	r3, [pc, #184]	; (8000344 <init_tasks_stack+0xf0>)
 800028c:	4a30      	ldr	r2, [pc, #192]	; (8000350 <init_tasks_stack+0xfc>)
 800028e:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000290:	4b2c      	ldr	r3, [pc, #176]	; (8000344 <init_tasks_stack+0xf0>)
 8000292:	4a30      	ldr	r2, [pc, #192]	; (8000354 <init_tasks_stack+0x100>)
 8000294:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 8000296:	4b2b      	ldr	r3, [pc, #172]	; (8000344 <init_tasks_stack+0xf0>)
 8000298:	4a2f      	ldr	r2, [pc, #188]	; (8000358 <init_tasks_stack+0x104>)
 800029a:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 800029c:	4b29      	ldr	r3, [pc, #164]	; (8000344 <init_tasks_stack+0xf0>)
 800029e:	4a2f      	ldr	r2, [pc, #188]	; (800035c <init_tasks_stack+0x108>)
 80002a0:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 80002a2:	4b28      	ldr	r3, [pc, #160]	; (8000344 <init_tasks_stack+0xf0>)
 80002a4:	4a2e      	ldr	r2, [pc, #184]	; (8000360 <init_tasks_stack+0x10c>)
 80002a6:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 80002a8:	4b26      	ldr	r3, [pc, #152]	; (8000344 <init_tasks_stack+0xf0>)
 80002aa:	4a2e      	ldr	r2, [pc, #184]	; (8000364 <init_tasks_stack+0x110>)
 80002ac:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 80002ae:	4b25      	ldr	r3, [pc, #148]	; (8000344 <init_tasks_stack+0xf0>)
 80002b0:	4a2d      	ldr	r2, [pc, #180]	; (8000368 <init_tasks_stack+0x114>)
 80002b2:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 80002b4:	4b23      	ldr	r3, [pc, #140]	; (8000344 <init_tasks_stack+0xf0>)
 80002b6:	4a2d      	ldr	r2, [pc, #180]	; (800036c <init_tasks_stack+0x118>)
 80002b8:	64da      	str	r2, [r3, #76]	; 0x4c
	uint32_t *pPSP;
	for(int i = 0; i < MAX_TASKS; i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
 80002be:	e037      	b.n	8000330 <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t *)user_tasks[i].psp_value;
 80002c0:	4a20      	ldr	r2, [pc, #128]	; (8000344 <init_tasks_stack+0xf0>)
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	011b      	lsls	r3, r3, #4
 80002c6:	4413      	add	r3, r2
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	60fb      	str	r3, [r7, #12]

		pPSP--;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	3b04      	subs	r3, #4
 80002d0:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002d8:	601a      	str	r2, [r3, #0]

		pPSP--;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	3b04      	subs	r3, #4
 80002de:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)user_tasks[i].task_handler;
 80002e0:	4a18      	ldr	r2, [pc, #96]	; (8000344 <init_tasks_stack+0xf0>)
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	011b      	lsls	r3, r3, #4
 80002e6:	4413      	add	r3, r2
 80002e8:	330c      	adds	r3, #12
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	461a      	mov	r2, r3
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	601a      	str	r2, [r3, #0]

		pPSP--;
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	3b04      	subs	r3, #4
 80002f6:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	f06f 0202 	mvn.w	r2, #2
 80002fe:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 8000300:	2300      	movs	r3, #0
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	e008      	b.n	8000318 <init_tasks_stack+0xc4>
		{
			pPSP--;
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	3b04      	subs	r3, #4
 800030a:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	3301      	adds	r3, #1
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b0c      	cmp	r3, #12
 800031c:	ddf3      	ble.n	8000306 <init_tasks_stack+0xb2>
		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 800031e:	68fa      	ldr	r2, [r7, #12]
 8000320:	4908      	ldr	r1, [pc, #32]	; (8000344 <init_tasks_stack+0xf0>)
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	011b      	lsls	r3, r3, #4
 8000326:	440b      	add	r3, r1
 8000328:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++)
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	3301      	adds	r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	2b04      	cmp	r3, #4
 8000334:	ddc4      	ble.n	80002c0 <init_tasks_stack+0x6c>
	}
}
 8000336:	bf00      	nop
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	20000094 	.word	0x20000094
 8000348:	20004000 	.word	0x20004000
 800034c:	20005000 	.word	0x20005000
 8000350:	20004c00 	.word	0x20004c00
 8000354:	20004800 	.word	0x20004800
 8000358:	20004400 	.word	0x20004400
 800035c:	08000199 	.word	0x08000199
 8000360:	080001a5 	.word	0x080001a5
 8000364:	080001b5 	.word	0x080001b5
 8000368:	080001c5 	.word	0x080001c5
 800036c:	080001d5 	.word	0x080001d5

08000370 <enable_faults>:

void enable_faults(void){
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t *)0xE000ED24;
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <enable_faults+0x38>)
 8000378:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	601a      	str	r2, [r3, #0]
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	e000ed24 	.word	0xe000ed24

080003ac <HardFault_Handler>:

void HardFault_Handler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	printf("Exception : HardFault\n");
 80003b0:	4801      	ldr	r0, [pc, #4]	; (80003b8 <HardFault_Handler+0xc>)
 80003b2:	f000 fa67 	bl	8000884 <puts>
	while(1);
 80003b6:	e7fe      	b.n	80003b6 <HardFault_Handler+0xa>
 80003b8:	08001164 	.word	0x08001164

080003bc <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80003c0:	4801      	ldr	r0, [pc, #4]	; (80003c8 <MemManage_Handler+0xc>)
 80003c2:	f000 fa5f 	bl	8000884 <puts>
	while(1);
 80003c6:	e7fe      	b.n	80003c6 <MemManage_Handler+0xa>
 80003c8:	0800117c 	.word	0x0800117c

080003cc <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80003d0:	4801      	ldr	r0, [pc, #4]	; (80003d8 <BusFault_Handler+0xc>)
 80003d2:	f000 fa57 	bl	8000884 <puts>
	while(1);
 80003d6:	e7fe      	b.n	80003d6 <BusFault_Handler+0xa>
 80003d8:	08001194 	.word	0x08001194

080003dc <get_psp_value>:
}
uint32_t get_psp_value(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 80003e0:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <get_psp_value+0x18>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <get_psp_value+0x1c>)
 80003e6:	011b      	lsls	r3, r3, #4
 80003e8:	4413      	add	r3, r2
 80003ea:	681b      	ldr	r3, [r3, #0]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	20000080 	.word	0x20000080
 80003f8:	20000094 	.word	0x20000094

080003fc <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <save_psp_value+0x20>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	4a05      	ldr	r2, [pc, #20]	; (8000420 <save_psp_value+0x24>)
 800040a:	011b      	lsls	r3, r3, #4
 800040c:	4413      	add	r3, r2
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	601a      	str	r2, [r3, #0]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	20000080 	.word	0x20000080
 8000420:	20000094 	.word	0x20000094

08000424 <update_next_task>:

void update_next_task(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]

	for(int i = 0; i < MAX_TASKS; i++)
 800042e:	2300      	movs	r3, #0
 8000430:	603b      	str	r3, [r7, #0]
 8000432:	e026      	b.n	8000482 <update_next_task+0x5e>
	{
		current_task++;
 8000434:	4b1b      	ldr	r3, [pc, #108]	; (80004a4 <update_next_task+0x80>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	3301      	adds	r3, #1
 800043a:	b2da      	uxtb	r2, r3
 800043c:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <update_next_task+0x80>)
 800043e:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS;
 8000440:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <update_next_task+0x80>)
 8000442:	781a      	ldrb	r2, [r3, #0]
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <update_next_task+0x84>)
 8000446:	fba3 1302 	umull	r1, r3, r3, r2
 800044a:	0899      	lsrs	r1, r3, #2
 800044c:	460b      	mov	r3, r1
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	440b      	add	r3, r1
 8000452:	1ad3      	subs	r3, r2, r3
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <update_next_task+0x80>)
 8000458:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <update_next_task+0x80>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	4a13      	ldr	r2, [pc, #76]	; (80004ac <update_next_task+0x88>)
 8000460:	011b      	lsls	r3, r3, #4
 8000462:	4413      	add	r3, r2
 8000464:	3308      	adds	r3, #8
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	607b      	str	r3, [r7, #4]

		if((state = TASK_RUNNING_STATE) && (current_task != 0))
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d003      	beq.n	800047c <update_next_task+0x58>
 8000474:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <update_next_task+0x80>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d106      	bne.n	800048a <update_next_task+0x66>
	for(int i = 0; i < MAX_TASKS; i++)
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	3301      	adds	r3, #1
 8000480:	603b      	str	r3, [r7, #0]
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	2b04      	cmp	r3, #4
 8000486:	ddd5      	ble.n	8000434 <update_next_task+0x10>
 8000488:	e000      	b.n	800048c <update_next_task+0x68>
		{
			break;
 800048a:	bf00      	nop
		}
	}

	if(state != TASK_RUNNING_STATE)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <update_next_task+0x74>
	{
		current_task = 0;
 8000492:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <update_next_task+0x80>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
	}
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	20000080 	.word	0x20000080
 80004a8:	cccccccd 	.word	0xcccccccd
 80004ac:	20000094 	.word	0x20000094

080004b0 <switch_sp_tp_psp>:

__attribute__((naked)) void switch_sp_tp_psp(void)
{
	__asm volatile ("PUSH {LR}");
 80004b0:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 80004b2:	f7ff ff93 	bl	80003dc <get_psp_value>
	__asm volatile ("MSR PSP,R0");
 80004b6:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");
 80004ba:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("MOV R0,#0X02");
 80004be:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 80004c2:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 80004c6:	4770      	bx	lr
}
 80004c8:	bf00      	nop

080004ca <PendSV_Handler>:
	INTERRUPT_ENABLE();
}

__attribute__((naked)) void PendSV_Handler()
{
	__asm volatile("MRS R0, PSP");
 80004ca:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB R0!, {R4-R11}");
 80004ce:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("PUSH {LR}");
 80004d2:	b500      	push	{lr}
	__asm volatile("BL save_psp_value");
 80004d4:	f7ff ff92 	bl	80003fc <save_psp_value>

	__asm volatile("BL update_next_task");
 80004d8:	f7ff ffa4 	bl	8000424 <update_next_task>
	__asm volatile("BL get_psp_value");
 80004dc:	f7ff ff7e 	bl	80003dc <get_psp_value>
	__asm volatile("LDMIA R0!, {R4-R11}");
 80004e0:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP,R0");
 80004e4:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80004e8:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 80004ec:	4770      	bx	lr
}
 80004ee:	bf00      	nop

080004f0 <update_global_tick_count>:

void update_global_tick_count(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
	g_tick_count++;
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <update_global_tick_count+0x18>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	4a03      	ldr	r2, [pc, #12]	; (8000508 <update_global_tick_count+0x18>)
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000084 	.word	0x20000084

0800050c <unblock_tasks>:

void unblock_tasks(void)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_TASKS; i++)
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	e028      	b.n	800056a <unblock_tasks+0x5e>
	{
		if(user_tasks[i].current_state |= TASK_RUNNING_STATE)
 8000518:	4a18      	ldr	r2, [pc, #96]	; (800057c <unblock_tasks+0x70>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	011b      	lsls	r3, r3, #4
 800051e:	4413      	add	r3, r2
 8000520:	3308      	adds	r3, #8
 8000522:	7819      	ldrb	r1, [r3, #0]
 8000524:	4a15      	ldr	r2, [pc, #84]	; (800057c <unblock_tasks+0x70>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	4413      	add	r3, r2
 800052c:	3308      	adds	r3, #8
 800052e:	460a      	mov	r2, r1
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	4a12      	ldr	r2, [pc, #72]	; (800057c <unblock_tasks+0x70>)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	011b      	lsls	r3, r3, #4
 8000538:	4413      	add	r3, r2
 800053a:	3308      	adds	r3, #8
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d010      	beq.n	8000564 <unblock_tasks+0x58>
		{
			if(user_tasks[i].block_count == g_tick_count)
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <unblock_tasks+0x70>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	011b      	lsls	r3, r3, #4
 8000548:	4413      	add	r3, r2
 800054a:	3304      	adds	r3, #4
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <unblock_tasks+0x74>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	d106      	bne.n	8000564 <unblock_tasks+0x58>
			{
				user_tasks[i].current_state = TASK_RUNNING_STATE;
 8000556:	4a09      	ldr	r2, [pc, #36]	; (800057c <unblock_tasks+0x70>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	4413      	add	r3, r2
 800055e:	3308      	adds	r3, #8
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b04      	cmp	r3, #4
 800056e:	ddd3      	ble.n	8000518 <unblock_tasks+0xc>
			}
		}
	}
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	20000094 	.word	0x20000094
 8000580:	20000084 	.word	0x20000084

08000584 <SysTick_Handler>:

void SysTick_Handler()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t *)0xE000ED04;
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <SysTick_Handler+0x28>)
 800058c:	607b      	str	r3, [r7, #4]

	update_global_tick_count();
 800058e:	f7ff ffaf 	bl	80004f0 <update_global_tick_count>

	unblock_tasks();
 8000592:	f7ff ffbb 	bl	800050c <unblock_tasks>
	*pICSR |= (1 << 28);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	601a      	str	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	e000ed04 	.word	0xe000ed04

080005b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	e00a      	b.n	80005d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005c2:	f3af 8000 	nop.w
 80005c6:	4601      	mov	r1, r0
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60ba      	str	r2, [r7, #8]
 80005ce:	b2ca      	uxtb	r2, r1
 80005d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3301      	adds	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dbf0      	blt.n	80005c2 <_read+0x12>
	}

return len;
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b086      	sub	sp, #24
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	e009      	b.n	8000610 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	60ba      	str	r2, [r7, #8]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbf1      	blt.n	80005fc <_write+0x12>
	}
	return len;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <_close>:

int _close(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
	return -1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000648:	605a      	str	r2, [r3, #4]
	return 0;
 800064a:	2300      	movs	r3, #0
}
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr

08000656 <_isatty>:

int _isatty(int file)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	return 1;
 800065e:	2301      	movs	r3, #1
}
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800066a:	b480      	push	{r7}
 800066c:	b085      	sub	sp, #20
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	607a      	str	r2, [r7, #4]
	return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
	...

08000684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <_sbrk+0x5c>)
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <_sbrk+0x60>)
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <_sbrk+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d102      	bne.n	80006a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <_sbrk+0x64>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <_sbrk+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d207      	bcs.n	80006c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b4:	f000 f846 	bl	8000744 <__errno>
 80006b8:	4603      	mov	r3, r0
 80006ba:	220c      	movs	r2, #12
 80006bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	e009      	b.n	80006d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <_sbrk+0x64>)
 80006d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d6:	68fb      	ldr	r3, [r7, #12]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20005000 	.word	0x20005000
 80006e4:	00000400 	.word	0x00000400
 80006e8:	20000088 	.word	0x20000088
 80006ec:	200000f8 	.word	0x200000f8

080006f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <LoopForever+0x6>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	; (8000730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <LoopForever+0xe>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	; (800073c <LoopForever+0x16>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800071e:	f000 f817 	bl	8000750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000722:	f7ff fd25 	bl	8000170 <main>

08000726 <LoopForever>:

LoopForever:
    b LoopForever
 8000726:	e7fe      	b.n	8000726 <LoopForever>
  ldr   r0, =_estack
 8000728:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000734:	08001218 	.word	0x08001218
  ldr r2, =_sbss
 8000738:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800073c:	200000f4 	.word	0x200000f4

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>
	...

08000744 <__errno>:
 8000744:	4b01      	ldr	r3, [pc, #4]	; (800074c <__errno+0x8>)
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000000 	.word	0x20000000

08000750 <__libc_init_array>:
 8000750:	b570      	push	{r4, r5, r6, lr}
 8000752:	2600      	movs	r6, #0
 8000754:	4d0c      	ldr	r5, [pc, #48]	; (8000788 <__libc_init_array+0x38>)
 8000756:	4c0d      	ldr	r4, [pc, #52]	; (800078c <__libc_init_array+0x3c>)
 8000758:	1b64      	subs	r4, r4, r5
 800075a:	10a4      	asrs	r4, r4, #2
 800075c:	42a6      	cmp	r6, r4
 800075e:	d109      	bne.n	8000774 <__libc_init_array+0x24>
 8000760:	f000 fce4 	bl	800112c <_init>
 8000764:	2600      	movs	r6, #0
 8000766:	4d0a      	ldr	r5, [pc, #40]	; (8000790 <__libc_init_array+0x40>)
 8000768:	4c0a      	ldr	r4, [pc, #40]	; (8000794 <__libc_init_array+0x44>)
 800076a:	1b64      	subs	r4, r4, r5
 800076c:	10a4      	asrs	r4, r4, #2
 800076e:	42a6      	cmp	r6, r4
 8000770:	d105      	bne.n	800077e <__libc_init_array+0x2e>
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f855 3b04 	ldr.w	r3, [r5], #4
 8000778:	4798      	blx	r3
 800077a:	3601      	adds	r6, #1
 800077c:	e7ee      	b.n	800075c <__libc_init_array+0xc>
 800077e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000782:	4798      	blx	r3
 8000784:	3601      	adds	r6, #1
 8000786:	e7f2      	b.n	800076e <__libc_init_array+0x1e>
 8000788:	08001210 	.word	0x08001210
 800078c:	08001210 	.word	0x08001210
 8000790:	08001210 	.word	0x08001210
 8000794:	08001214 	.word	0x08001214

08000798 <memset>:
 8000798:	4603      	mov	r3, r0
 800079a:	4402      	add	r2, r0
 800079c:	4293      	cmp	r3, r2
 800079e:	d100      	bne.n	80007a2 <memset+0xa>
 80007a0:	4770      	bx	lr
 80007a2:	f803 1b01 	strb.w	r1, [r3], #1
 80007a6:	e7f9      	b.n	800079c <memset+0x4>

080007a8 <_puts_r>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	460e      	mov	r6, r1
 80007ac:	4605      	mov	r5, r0
 80007ae:	b118      	cbz	r0, 80007b8 <_puts_r+0x10>
 80007b0:	6983      	ldr	r3, [r0, #24]
 80007b2:	b90b      	cbnz	r3, 80007b8 <_puts_r+0x10>
 80007b4:	f000 fa48 	bl	8000c48 <__sinit>
 80007b8:	69ab      	ldr	r3, [r5, #24]
 80007ba:	68ac      	ldr	r4, [r5, #8]
 80007bc:	b913      	cbnz	r3, 80007c4 <_puts_r+0x1c>
 80007be:	4628      	mov	r0, r5
 80007c0:	f000 fa42 	bl	8000c48 <__sinit>
 80007c4:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <_puts_r+0xd0>)
 80007c6:	429c      	cmp	r4, r3
 80007c8:	d120      	bne.n	800080c <_puts_r+0x64>
 80007ca:	686c      	ldr	r4, [r5, #4]
 80007cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007ce:	07db      	lsls	r3, r3, #31
 80007d0:	d405      	bmi.n	80007de <_puts_r+0x36>
 80007d2:	89a3      	ldrh	r3, [r4, #12]
 80007d4:	0598      	lsls	r0, r3, #22
 80007d6:	d402      	bmi.n	80007de <_puts_r+0x36>
 80007d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007da:	f000 fad3 	bl	8000d84 <__retarget_lock_acquire_recursive>
 80007de:	89a3      	ldrh	r3, [r4, #12]
 80007e0:	0719      	lsls	r1, r3, #28
 80007e2:	d51d      	bpl.n	8000820 <_puts_r+0x78>
 80007e4:	6923      	ldr	r3, [r4, #16]
 80007e6:	b1db      	cbz	r3, 8000820 <_puts_r+0x78>
 80007e8:	3e01      	subs	r6, #1
 80007ea:	68a3      	ldr	r3, [r4, #8]
 80007ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007f0:	3b01      	subs	r3, #1
 80007f2:	60a3      	str	r3, [r4, #8]
 80007f4:	bb39      	cbnz	r1, 8000846 <_puts_r+0x9e>
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da38      	bge.n	800086c <_puts_r+0xc4>
 80007fa:	4622      	mov	r2, r4
 80007fc:	210a      	movs	r1, #10
 80007fe:	4628      	mov	r0, r5
 8000800:	f000 f848 	bl	8000894 <__swbuf_r>
 8000804:	3001      	adds	r0, #1
 8000806:	d011      	beq.n	800082c <_puts_r+0x84>
 8000808:	250a      	movs	r5, #10
 800080a:	e011      	b.n	8000830 <_puts_r+0x88>
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <_puts_r+0xd4>)
 800080e:	429c      	cmp	r4, r3
 8000810:	d101      	bne.n	8000816 <_puts_r+0x6e>
 8000812:	68ac      	ldr	r4, [r5, #8]
 8000814:	e7da      	b.n	80007cc <_puts_r+0x24>
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <_puts_r+0xd8>)
 8000818:	429c      	cmp	r4, r3
 800081a:	bf08      	it	eq
 800081c:	68ec      	ldreq	r4, [r5, #12]
 800081e:	e7d5      	b.n	80007cc <_puts_r+0x24>
 8000820:	4621      	mov	r1, r4
 8000822:	4628      	mov	r0, r5
 8000824:	f000 f888 	bl	8000938 <__swsetup_r>
 8000828:	2800      	cmp	r0, #0
 800082a:	d0dd      	beq.n	80007e8 <_puts_r+0x40>
 800082c:	f04f 35ff 	mov.w	r5, #4294967295
 8000830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000832:	07da      	lsls	r2, r3, #31
 8000834:	d405      	bmi.n	8000842 <_puts_r+0x9a>
 8000836:	89a3      	ldrh	r3, [r4, #12]
 8000838:	059b      	lsls	r3, r3, #22
 800083a:	d402      	bmi.n	8000842 <_puts_r+0x9a>
 800083c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800083e:	f000 faa2 	bl	8000d86 <__retarget_lock_release_recursive>
 8000842:	4628      	mov	r0, r5
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	2b00      	cmp	r3, #0
 8000848:	da04      	bge.n	8000854 <_puts_r+0xac>
 800084a:	69a2      	ldr	r2, [r4, #24]
 800084c:	429a      	cmp	r2, r3
 800084e:	dc06      	bgt.n	800085e <_puts_r+0xb6>
 8000850:	290a      	cmp	r1, #10
 8000852:	d004      	beq.n	800085e <_puts_r+0xb6>
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	6022      	str	r2, [r4, #0]
 800085a:	7019      	strb	r1, [r3, #0]
 800085c:	e7c5      	b.n	80007ea <_puts_r+0x42>
 800085e:	4622      	mov	r2, r4
 8000860:	4628      	mov	r0, r5
 8000862:	f000 f817 	bl	8000894 <__swbuf_r>
 8000866:	3001      	adds	r0, #1
 8000868:	d1bf      	bne.n	80007ea <_puts_r+0x42>
 800086a:	e7df      	b.n	800082c <_puts_r+0x84>
 800086c:	250a      	movs	r5, #10
 800086e:	6823      	ldr	r3, [r4, #0]
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	6022      	str	r2, [r4, #0]
 8000874:	701d      	strb	r5, [r3, #0]
 8000876:	e7db      	b.n	8000830 <_puts_r+0x88>
 8000878:	080011d0 	.word	0x080011d0
 800087c:	080011f0 	.word	0x080011f0
 8000880:	080011b0 	.word	0x080011b0

08000884 <puts>:
 8000884:	4b02      	ldr	r3, [pc, #8]	; (8000890 <puts+0xc>)
 8000886:	4601      	mov	r1, r0
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	f7ff bf8d 	b.w	80007a8 <_puts_r>
 800088e:	bf00      	nop
 8000890:	20000000 	.word	0x20000000

08000894 <__swbuf_r>:
 8000894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000896:	460e      	mov	r6, r1
 8000898:	4614      	mov	r4, r2
 800089a:	4605      	mov	r5, r0
 800089c:	b118      	cbz	r0, 80008a6 <__swbuf_r+0x12>
 800089e:	6983      	ldr	r3, [r0, #24]
 80008a0:	b90b      	cbnz	r3, 80008a6 <__swbuf_r+0x12>
 80008a2:	f000 f9d1 	bl	8000c48 <__sinit>
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <__swbuf_r+0x98>)
 80008a8:	429c      	cmp	r4, r3
 80008aa:	d12b      	bne.n	8000904 <__swbuf_r+0x70>
 80008ac:	686c      	ldr	r4, [r5, #4]
 80008ae:	69a3      	ldr	r3, [r4, #24]
 80008b0:	60a3      	str	r3, [r4, #8]
 80008b2:	89a3      	ldrh	r3, [r4, #12]
 80008b4:	071a      	lsls	r2, r3, #28
 80008b6:	d52f      	bpl.n	8000918 <__swbuf_r+0x84>
 80008b8:	6923      	ldr	r3, [r4, #16]
 80008ba:	b36b      	cbz	r3, 8000918 <__swbuf_r+0x84>
 80008bc:	6923      	ldr	r3, [r4, #16]
 80008be:	6820      	ldr	r0, [r4, #0]
 80008c0:	b2f6      	uxtb	r6, r6
 80008c2:	1ac0      	subs	r0, r0, r3
 80008c4:	6963      	ldr	r3, [r4, #20]
 80008c6:	4637      	mov	r7, r6
 80008c8:	4283      	cmp	r3, r0
 80008ca:	dc04      	bgt.n	80008d6 <__swbuf_r+0x42>
 80008cc:	4621      	mov	r1, r4
 80008ce:	4628      	mov	r0, r5
 80008d0:	f000 f926 	bl	8000b20 <_fflush_r>
 80008d4:	bb30      	cbnz	r0, 8000924 <__swbuf_r+0x90>
 80008d6:	68a3      	ldr	r3, [r4, #8]
 80008d8:	3001      	adds	r0, #1
 80008da:	3b01      	subs	r3, #1
 80008dc:	60a3      	str	r3, [r4, #8]
 80008de:	6823      	ldr	r3, [r4, #0]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	6022      	str	r2, [r4, #0]
 80008e4:	701e      	strb	r6, [r3, #0]
 80008e6:	6963      	ldr	r3, [r4, #20]
 80008e8:	4283      	cmp	r3, r0
 80008ea:	d004      	beq.n	80008f6 <__swbuf_r+0x62>
 80008ec:	89a3      	ldrh	r3, [r4, #12]
 80008ee:	07db      	lsls	r3, r3, #31
 80008f0:	d506      	bpl.n	8000900 <__swbuf_r+0x6c>
 80008f2:	2e0a      	cmp	r6, #10
 80008f4:	d104      	bne.n	8000900 <__swbuf_r+0x6c>
 80008f6:	4621      	mov	r1, r4
 80008f8:	4628      	mov	r0, r5
 80008fa:	f000 f911 	bl	8000b20 <_fflush_r>
 80008fe:	b988      	cbnz	r0, 8000924 <__swbuf_r+0x90>
 8000900:	4638      	mov	r0, r7
 8000902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <__swbuf_r+0x9c>)
 8000906:	429c      	cmp	r4, r3
 8000908:	d101      	bne.n	800090e <__swbuf_r+0x7a>
 800090a:	68ac      	ldr	r4, [r5, #8]
 800090c:	e7cf      	b.n	80008ae <__swbuf_r+0x1a>
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <__swbuf_r+0xa0>)
 8000910:	429c      	cmp	r4, r3
 8000912:	bf08      	it	eq
 8000914:	68ec      	ldreq	r4, [r5, #12]
 8000916:	e7ca      	b.n	80008ae <__swbuf_r+0x1a>
 8000918:	4621      	mov	r1, r4
 800091a:	4628      	mov	r0, r5
 800091c:	f000 f80c 	bl	8000938 <__swsetup_r>
 8000920:	2800      	cmp	r0, #0
 8000922:	d0cb      	beq.n	80008bc <__swbuf_r+0x28>
 8000924:	f04f 37ff 	mov.w	r7, #4294967295
 8000928:	e7ea      	b.n	8000900 <__swbuf_r+0x6c>
 800092a:	bf00      	nop
 800092c:	080011d0 	.word	0x080011d0
 8000930:	080011f0 	.word	0x080011f0
 8000934:	080011b0 	.word	0x080011b0

08000938 <__swsetup_r>:
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <__swsetup_r+0xcc>)
 800093a:	b570      	push	{r4, r5, r6, lr}
 800093c:	681d      	ldr	r5, [r3, #0]
 800093e:	4606      	mov	r6, r0
 8000940:	460c      	mov	r4, r1
 8000942:	b125      	cbz	r5, 800094e <__swsetup_r+0x16>
 8000944:	69ab      	ldr	r3, [r5, #24]
 8000946:	b913      	cbnz	r3, 800094e <__swsetup_r+0x16>
 8000948:	4628      	mov	r0, r5
 800094a:	f000 f97d 	bl	8000c48 <__sinit>
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <__swsetup_r+0xd0>)
 8000950:	429c      	cmp	r4, r3
 8000952:	d10f      	bne.n	8000974 <__swsetup_r+0x3c>
 8000954:	686c      	ldr	r4, [r5, #4]
 8000956:	89a3      	ldrh	r3, [r4, #12]
 8000958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800095c:	0719      	lsls	r1, r3, #28
 800095e:	d42c      	bmi.n	80009ba <__swsetup_r+0x82>
 8000960:	06dd      	lsls	r5, r3, #27
 8000962:	d411      	bmi.n	8000988 <__swsetup_r+0x50>
 8000964:	2309      	movs	r3, #9
 8000966:	6033      	str	r3, [r6, #0]
 8000968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	81a3      	strh	r3, [r4, #12]
 8000972:	e03e      	b.n	80009f2 <__swsetup_r+0xba>
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <__swsetup_r+0xd4>)
 8000976:	429c      	cmp	r4, r3
 8000978:	d101      	bne.n	800097e <__swsetup_r+0x46>
 800097a:	68ac      	ldr	r4, [r5, #8]
 800097c:	e7eb      	b.n	8000956 <__swsetup_r+0x1e>
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <__swsetup_r+0xd8>)
 8000980:	429c      	cmp	r4, r3
 8000982:	bf08      	it	eq
 8000984:	68ec      	ldreq	r4, [r5, #12]
 8000986:	e7e6      	b.n	8000956 <__swsetup_r+0x1e>
 8000988:	0758      	lsls	r0, r3, #29
 800098a:	d512      	bpl.n	80009b2 <__swsetup_r+0x7a>
 800098c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800098e:	b141      	cbz	r1, 80009a2 <__swsetup_r+0x6a>
 8000990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000994:	4299      	cmp	r1, r3
 8000996:	d002      	beq.n	800099e <__swsetup_r+0x66>
 8000998:	4630      	mov	r0, r6
 800099a:	f000 fa59 	bl	8000e50 <_free_r>
 800099e:	2300      	movs	r3, #0
 80009a0:	6363      	str	r3, [r4, #52]	; 0x34
 80009a2:	89a3      	ldrh	r3, [r4, #12]
 80009a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009a8:	81a3      	strh	r3, [r4, #12]
 80009aa:	2300      	movs	r3, #0
 80009ac:	6063      	str	r3, [r4, #4]
 80009ae:	6923      	ldr	r3, [r4, #16]
 80009b0:	6023      	str	r3, [r4, #0]
 80009b2:	89a3      	ldrh	r3, [r4, #12]
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	81a3      	strh	r3, [r4, #12]
 80009ba:	6923      	ldr	r3, [r4, #16]
 80009bc:	b94b      	cbnz	r3, 80009d2 <__swsetup_r+0x9a>
 80009be:	89a3      	ldrh	r3, [r4, #12]
 80009c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80009c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009c8:	d003      	beq.n	80009d2 <__swsetup_r+0x9a>
 80009ca:	4621      	mov	r1, r4
 80009cc:	4630      	mov	r0, r6
 80009ce:	f000 f9ff 	bl	8000dd0 <__smakebuf_r>
 80009d2:	89a0      	ldrh	r0, [r4, #12]
 80009d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009d8:	f010 0301 	ands.w	r3, r0, #1
 80009dc:	d00a      	beq.n	80009f4 <__swsetup_r+0xbc>
 80009de:	2300      	movs	r3, #0
 80009e0:	60a3      	str	r3, [r4, #8]
 80009e2:	6963      	ldr	r3, [r4, #20]
 80009e4:	425b      	negs	r3, r3
 80009e6:	61a3      	str	r3, [r4, #24]
 80009e8:	6923      	ldr	r3, [r4, #16]
 80009ea:	b943      	cbnz	r3, 80009fe <__swsetup_r+0xc6>
 80009ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009f0:	d1ba      	bne.n	8000968 <__swsetup_r+0x30>
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	0781      	lsls	r1, r0, #30
 80009f6:	bf58      	it	pl
 80009f8:	6963      	ldrpl	r3, [r4, #20]
 80009fa:	60a3      	str	r3, [r4, #8]
 80009fc:	e7f4      	b.n	80009e8 <__swsetup_r+0xb0>
 80009fe:	2000      	movs	r0, #0
 8000a00:	e7f7      	b.n	80009f2 <__swsetup_r+0xba>
 8000a02:	bf00      	nop
 8000a04:	20000000 	.word	0x20000000
 8000a08:	080011d0 	.word	0x080011d0
 8000a0c:	080011f0 	.word	0x080011f0
 8000a10:	080011b0 	.word	0x080011b0

08000a14 <__sflush_r>:
 8000a14:	898a      	ldrh	r2, [r1, #12]
 8000a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a1a:	4605      	mov	r5, r0
 8000a1c:	0710      	lsls	r0, r2, #28
 8000a1e:	460c      	mov	r4, r1
 8000a20:	d458      	bmi.n	8000ad4 <__sflush_r+0xc0>
 8000a22:	684b      	ldr	r3, [r1, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	dc05      	bgt.n	8000a34 <__sflush_r+0x20>
 8000a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	dc02      	bgt.n	8000a34 <__sflush_r+0x20>
 8000a2e:	2000      	movs	r0, #0
 8000a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	d0f9      	beq.n	8000a2e <__sflush_r+0x1a>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a40:	682f      	ldr	r7, [r5, #0]
 8000a42:	602b      	str	r3, [r5, #0]
 8000a44:	d032      	beq.n	8000aac <__sflush_r+0x98>
 8000a46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a48:	89a3      	ldrh	r3, [r4, #12]
 8000a4a:	075a      	lsls	r2, r3, #29
 8000a4c:	d505      	bpl.n	8000a5a <__sflush_r+0x46>
 8000a4e:	6863      	ldr	r3, [r4, #4]
 8000a50:	1ac0      	subs	r0, r0, r3
 8000a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a54:	b10b      	cbz	r3, 8000a5a <__sflush_r+0x46>
 8000a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a58:	1ac0      	subs	r0, r0, r3
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a60:	4628      	mov	r0, r5
 8000a62:	6a21      	ldr	r1, [r4, #32]
 8000a64:	47b0      	blx	r6
 8000a66:	1c43      	adds	r3, r0, #1
 8000a68:	89a3      	ldrh	r3, [r4, #12]
 8000a6a:	d106      	bne.n	8000a7a <__sflush_r+0x66>
 8000a6c:	6829      	ldr	r1, [r5, #0]
 8000a6e:	291d      	cmp	r1, #29
 8000a70:	d82c      	bhi.n	8000acc <__sflush_r+0xb8>
 8000a72:	4a2a      	ldr	r2, [pc, #168]	; (8000b1c <__sflush_r+0x108>)
 8000a74:	40ca      	lsrs	r2, r1
 8000a76:	07d6      	lsls	r6, r2, #31
 8000a78:	d528      	bpl.n	8000acc <__sflush_r+0xb8>
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	6062      	str	r2, [r4, #4]
 8000a7e:	6922      	ldr	r2, [r4, #16]
 8000a80:	04d9      	lsls	r1, r3, #19
 8000a82:	6022      	str	r2, [r4, #0]
 8000a84:	d504      	bpl.n	8000a90 <__sflush_r+0x7c>
 8000a86:	1c42      	adds	r2, r0, #1
 8000a88:	d101      	bne.n	8000a8e <__sflush_r+0x7a>
 8000a8a:	682b      	ldr	r3, [r5, #0]
 8000a8c:	b903      	cbnz	r3, 8000a90 <__sflush_r+0x7c>
 8000a8e:	6560      	str	r0, [r4, #84]	; 0x54
 8000a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a92:	602f      	str	r7, [r5, #0]
 8000a94:	2900      	cmp	r1, #0
 8000a96:	d0ca      	beq.n	8000a2e <__sflush_r+0x1a>
 8000a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	d002      	beq.n	8000aa6 <__sflush_r+0x92>
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	f000 f9d5 	bl	8000e50 <_free_r>
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8000aaa:	e7c1      	b.n	8000a30 <__sflush_r+0x1c>
 8000aac:	6a21      	ldr	r1, [r4, #32]
 8000aae:	2301      	movs	r3, #1
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	47b0      	blx	r6
 8000ab4:	1c41      	adds	r1, r0, #1
 8000ab6:	d1c7      	bne.n	8000a48 <__sflush_r+0x34>
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0c4      	beq.n	8000a48 <__sflush_r+0x34>
 8000abe:	2b1d      	cmp	r3, #29
 8000ac0:	d001      	beq.n	8000ac6 <__sflush_r+0xb2>
 8000ac2:	2b16      	cmp	r3, #22
 8000ac4:	d101      	bne.n	8000aca <__sflush_r+0xb6>
 8000ac6:	602f      	str	r7, [r5, #0]
 8000ac8:	e7b1      	b.n	8000a2e <__sflush_r+0x1a>
 8000aca:	89a3      	ldrh	r3, [r4, #12]
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	81a3      	strh	r3, [r4, #12]
 8000ad2:	e7ad      	b.n	8000a30 <__sflush_r+0x1c>
 8000ad4:	690f      	ldr	r7, [r1, #16]
 8000ad6:	2f00      	cmp	r7, #0
 8000ad8:	d0a9      	beq.n	8000a2e <__sflush_r+0x1a>
 8000ada:	0793      	lsls	r3, r2, #30
 8000adc:	bf18      	it	ne
 8000ade:	2300      	movne	r3, #0
 8000ae0:	680e      	ldr	r6, [r1, #0]
 8000ae2:	bf08      	it	eq
 8000ae4:	694b      	ldreq	r3, [r1, #20]
 8000ae6:	eba6 0807 	sub.w	r8, r6, r7
 8000aea:	600f      	str	r7, [r1, #0]
 8000aec:	608b      	str	r3, [r1, #8]
 8000aee:	f1b8 0f00 	cmp.w	r8, #0
 8000af2:	dd9c      	ble.n	8000a2e <__sflush_r+0x1a>
 8000af4:	4643      	mov	r3, r8
 8000af6:	463a      	mov	r2, r7
 8000af8:	4628      	mov	r0, r5
 8000afa:	6a21      	ldr	r1, [r4, #32]
 8000afc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000afe:	47b0      	blx	r6
 8000b00:	2800      	cmp	r0, #0
 8000b02:	dc06      	bgt.n	8000b12 <__sflush_r+0xfe>
 8000b04:	89a3      	ldrh	r3, [r4, #12]
 8000b06:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b0e:	81a3      	strh	r3, [r4, #12]
 8000b10:	e78e      	b.n	8000a30 <__sflush_r+0x1c>
 8000b12:	4407      	add	r7, r0
 8000b14:	eba8 0800 	sub.w	r8, r8, r0
 8000b18:	e7e9      	b.n	8000aee <__sflush_r+0xda>
 8000b1a:	bf00      	nop
 8000b1c:	20400001 	.word	0x20400001

08000b20 <_fflush_r>:
 8000b20:	b538      	push	{r3, r4, r5, lr}
 8000b22:	690b      	ldr	r3, [r1, #16]
 8000b24:	4605      	mov	r5, r0
 8000b26:	460c      	mov	r4, r1
 8000b28:	b913      	cbnz	r3, 8000b30 <_fflush_r+0x10>
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	bd38      	pop	{r3, r4, r5, pc}
 8000b30:	b118      	cbz	r0, 8000b3a <_fflush_r+0x1a>
 8000b32:	6983      	ldr	r3, [r0, #24]
 8000b34:	b90b      	cbnz	r3, 8000b3a <_fflush_r+0x1a>
 8000b36:	f000 f887 	bl	8000c48 <__sinit>
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <_fflush_r+0x6c>)
 8000b3c:	429c      	cmp	r4, r3
 8000b3e:	d11b      	bne.n	8000b78 <_fflush_r+0x58>
 8000b40:	686c      	ldr	r4, [r5, #4]
 8000b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0ef      	beq.n	8000b2a <_fflush_r+0xa>
 8000b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b4c:	07d0      	lsls	r0, r2, #31
 8000b4e:	d404      	bmi.n	8000b5a <_fflush_r+0x3a>
 8000b50:	0599      	lsls	r1, r3, #22
 8000b52:	d402      	bmi.n	8000b5a <_fflush_r+0x3a>
 8000b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b56:	f000 f915 	bl	8000d84 <__retarget_lock_acquire_recursive>
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	f7ff ff59 	bl	8000a14 <__sflush_r>
 8000b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b64:	4605      	mov	r5, r0
 8000b66:	07da      	lsls	r2, r3, #31
 8000b68:	d4e0      	bmi.n	8000b2c <_fflush_r+0xc>
 8000b6a:	89a3      	ldrh	r3, [r4, #12]
 8000b6c:	059b      	lsls	r3, r3, #22
 8000b6e:	d4dd      	bmi.n	8000b2c <_fflush_r+0xc>
 8000b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b72:	f000 f908 	bl	8000d86 <__retarget_lock_release_recursive>
 8000b76:	e7d9      	b.n	8000b2c <_fflush_r+0xc>
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <_fflush_r+0x70>)
 8000b7a:	429c      	cmp	r4, r3
 8000b7c:	d101      	bne.n	8000b82 <_fflush_r+0x62>
 8000b7e:	68ac      	ldr	r4, [r5, #8]
 8000b80:	e7df      	b.n	8000b42 <_fflush_r+0x22>
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <_fflush_r+0x74>)
 8000b84:	429c      	cmp	r4, r3
 8000b86:	bf08      	it	eq
 8000b88:	68ec      	ldreq	r4, [r5, #12]
 8000b8a:	e7da      	b.n	8000b42 <_fflush_r+0x22>
 8000b8c:	080011d0 	.word	0x080011d0
 8000b90:	080011f0 	.word	0x080011f0
 8000b94:	080011b0 	.word	0x080011b0

08000b98 <std>:
 8000b98:	2300      	movs	r3, #0
 8000b9a:	b510      	push	{r4, lr}
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8000ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ba6:	6083      	str	r3, [r0, #8]
 8000ba8:	8181      	strh	r1, [r0, #12]
 8000baa:	6643      	str	r3, [r0, #100]	; 0x64
 8000bac:	81c2      	strh	r2, [r0, #14]
 8000bae:	6183      	str	r3, [r0, #24]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	305c      	adds	r0, #92	; 0x5c
 8000bb6:	f7ff fdef 	bl	8000798 <memset>
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <std+0x38>)
 8000bbc:	6224      	str	r4, [r4, #32]
 8000bbe:	6263      	str	r3, [r4, #36]	; 0x24
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <std+0x3c>)
 8000bc2:	62a3      	str	r3, [r4, #40]	; 0x28
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <std+0x40>)
 8000bc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <std+0x44>)
 8000bca:	6323      	str	r3, [r4, #48]	; 0x30
 8000bcc:	bd10      	pop	{r4, pc}
 8000bce:	bf00      	nop
 8000bd0:	08000fbd 	.word	0x08000fbd
 8000bd4:	08000fdf 	.word	0x08000fdf
 8000bd8:	08001017 	.word	0x08001017
 8000bdc:	0800103b 	.word	0x0800103b

08000be0 <_cleanup_r>:
 8000be0:	4901      	ldr	r1, [pc, #4]	; (8000be8 <_cleanup_r+0x8>)
 8000be2:	f000 b8af 	b.w	8000d44 <_fwalk_reent>
 8000be6:	bf00      	nop
 8000be8:	08000b21 	.word	0x08000b21

08000bec <__sfmoreglue>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	2568      	movs	r5, #104	; 0x68
 8000bf0:	1e4a      	subs	r2, r1, #1
 8000bf2:	4355      	muls	r5, r2
 8000bf4:	460e      	mov	r6, r1
 8000bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000bfa:	f000 f975 	bl	8000ee8 <_malloc_r>
 8000bfe:	4604      	mov	r4, r0
 8000c00:	b140      	cbz	r0, 8000c14 <__sfmoreglue+0x28>
 8000c02:	2100      	movs	r1, #0
 8000c04:	e9c0 1600 	strd	r1, r6, [r0]
 8000c08:	300c      	adds	r0, #12
 8000c0a:	60a0      	str	r0, [r4, #8]
 8000c0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c10:	f7ff fdc2 	bl	8000798 <memset>
 8000c14:	4620      	mov	r0, r4
 8000c16:	bd70      	pop	{r4, r5, r6, pc}

08000c18 <__sfp_lock_acquire>:
 8000c18:	4801      	ldr	r0, [pc, #4]	; (8000c20 <__sfp_lock_acquire+0x8>)
 8000c1a:	f000 b8b3 	b.w	8000d84 <__retarget_lock_acquire_recursive>
 8000c1e:	bf00      	nop
 8000c20:	200000ec 	.word	0x200000ec

08000c24 <__sfp_lock_release>:
 8000c24:	4801      	ldr	r0, [pc, #4]	; (8000c2c <__sfp_lock_release+0x8>)
 8000c26:	f000 b8ae 	b.w	8000d86 <__retarget_lock_release_recursive>
 8000c2a:	bf00      	nop
 8000c2c:	200000ec 	.word	0x200000ec

08000c30 <__sinit_lock_acquire>:
 8000c30:	4801      	ldr	r0, [pc, #4]	; (8000c38 <__sinit_lock_acquire+0x8>)
 8000c32:	f000 b8a7 	b.w	8000d84 <__retarget_lock_acquire_recursive>
 8000c36:	bf00      	nop
 8000c38:	200000e7 	.word	0x200000e7

08000c3c <__sinit_lock_release>:
 8000c3c:	4801      	ldr	r0, [pc, #4]	; (8000c44 <__sinit_lock_release+0x8>)
 8000c3e:	f000 b8a2 	b.w	8000d86 <__retarget_lock_release_recursive>
 8000c42:	bf00      	nop
 8000c44:	200000e7 	.word	0x200000e7

08000c48 <__sinit>:
 8000c48:	b510      	push	{r4, lr}
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	f7ff fff0 	bl	8000c30 <__sinit_lock_acquire>
 8000c50:	69a3      	ldr	r3, [r4, #24]
 8000c52:	b11b      	cbz	r3, 8000c5c <__sinit+0x14>
 8000c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c58:	f7ff bff0 	b.w	8000c3c <__sinit_lock_release>
 8000c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000c60:	6523      	str	r3, [r4, #80]	; 0x50
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <__sinit+0x68>)
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <__sinit+0x6c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	62a2      	str	r2, [r4, #40]	; 0x28
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	bf08      	it	eq
 8000c6e:	2301      	moveq	r3, #1
 8000c70:	4620      	mov	r0, r4
 8000c72:	bf08      	it	eq
 8000c74:	61a3      	streq	r3, [r4, #24]
 8000c76:	f000 f81f 	bl	8000cb8 <__sfp>
 8000c7a:	6060      	str	r0, [r4, #4]
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	f000 f81b 	bl	8000cb8 <__sfp>
 8000c82:	60a0      	str	r0, [r4, #8]
 8000c84:	4620      	mov	r0, r4
 8000c86:	f000 f817 	bl	8000cb8 <__sfp>
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	60e0      	str	r0, [r4, #12]
 8000c90:	6860      	ldr	r0, [r4, #4]
 8000c92:	f7ff ff81 	bl	8000b98 <std>
 8000c96:	2201      	movs	r2, #1
 8000c98:	2109      	movs	r1, #9
 8000c9a:	68a0      	ldr	r0, [r4, #8]
 8000c9c:	f7ff ff7c 	bl	8000b98 <std>
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	2112      	movs	r1, #18
 8000ca4:	68e0      	ldr	r0, [r4, #12]
 8000ca6:	f7ff ff77 	bl	8000b98 <std>
 8000caa:	2301      	movs	r3, #1
 8000cac:	61a3      	str	r3, [r4, #24]
 8000cae:	e7d1      	b.n	8000c54 <__sinit+0xc>
 8000cb0:	080011ac 	.word	0x080011ac
 8000cb4:	08000be1 	.word	0x08000be1

08000cb8 <__sfp>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	4607      	mov	r7, r0
 8000cbc:	f7ff ffac 	bl	8000c18 <__sfp_lock_acquire>
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <__sfp+0x84>)
 8000cc2:	681e      	ldr	r6, [r3, #0]
 8000cc4:	69b3      	ldr	r3, [r6, #24]
 8000cc6:	b913      	cbnz	r3, 8000cce <__sfp+0x16>
 8000cc8:	4630      	mov	r0, r6
 8000cca:	f7ff ffbd 	bl	8000c48 <__sinit>
 8000cce:	3648      	adds	r6, #72	; 0x48
 8000cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	d503      	bpl.n	8000ce0 <__sfp+0x28>
 8000cd8:	6833      	ldr	r3, [r6, #0]
 8000cda:	b30b      	cbz	r3, 8000d20 <__sfp+0x68>
 8000cdc:	6836      	ldr	r6, [r6, #0]
 8000cde:	e7f7      	b.n	8000cd0 <__sfp+0x18>
 8000ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ce4:	b9d5      	cbnz	r5, 8000d1c <__sfp+0x64>
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <__sfp+0x88>)
 8000ce8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000cec:	60e3      	str	r3, [r4, #12]
 8000cee:	6665      	str	r5, [r4, #100]	; 0x64
 8000cf0:	f000 f847 	bl	8000d82 <__retarget_lock_init_recursive>
 8000cf4:	f7ff ff96 	bl	8000c24 <__sfp_lock_release>
 8000cf8:	2208      	movs	r2, #8
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000d00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000d04:	6025      	str	r5, [r4, #0]
 8000d06:	61a5      	str	r5, [r4, #24]
 8000d08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d0c:	f7ff fd44 	bl	8000798 <memset>
 8000d10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d18:	4620      	mov	r0, r4
 8000d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d1c:	3468      	adds	r4, #104	; 0x68
 8000d1e:	e7d9      	b.n	8000cd4 <__sfp+0x1c>
 8000d20:	2104      	movs	r1, #4
 8000d22:	4638      	mov	r0, r7
 8000d24:	f7ff ff62 	bl	8000bec <__sfmoreglue>
 8000d28:	4604      	mov	r4, r0
 8000d2a:	6030      	str	r0, [r6, #0]
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d1d5      	bne.n	8000cdc <__sfp+0x24>
 8000d30:	f7ff ff78 	bl	8000c24 <__sfp_lock_release>
 8000d34:	230c      	movs	r3, #12
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	e7ee      	b.n	8000d18 <__sfp+0x60>
 8000d3a:	bf00      	nop
 8000d3c:	080011ac 	.word	0x080011ac
 8000d40:	ffff0001 	.word	0xffff0001

08000d44 <_fwalk_reent>:
 8000d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4688      	mov	r8, r1
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d56:	f1b9 0901 	subs.w	r9, r9, #1
 8000d5a:	d505      	bpl.n	8000d68 <_fwalk_reent+0x24>
 8000d5c:	6824      	ldr	r4, [r4, #0]
 8000d5e:	2c00      	cmp	r4, #0
 8000d60:	d1f7      	bne.n	8000d52 <_fwalk_reent+0xe>
 8000d62:	4638      	mov	r0, r7
 8000d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d68:	89ab      	ldrh	r3, [r5, #12]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d907      	bls.n	8000d7e <_fwalk_reent+0x3a>
 8000d6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d72:	3301      	adds	r3, #1
 8000d74:	d003      	beq.n	8000d7e <_fwalk_reent+0x3a>
 8000d76:	4629      	mov	r1, r5
 8000d78:	4630      	mov	r0, r6
 8000d7a:	47c0      	blx	r8
 8000d7c:	4307      	orrs	r7, r0
 8000d7e:	3568      	adds	r5, #104	; 0x68
 8000d80:	e7e9      	b.n	8000d56 <_fwalk_reent+0x12>

08000d82 <__retarget_lock_init_recursive>:
 8000d82:	4770      	bx	lr

08000d84 <__retarget_lock_acquire_recursive>:
 8000d84:	4770      	bx	lr

08000d86 <__retarget_lock_release_recursive>:
 8000d86:	4770      	bx	lr

08000d88 <__swhatbuf_r>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	460e      	mov	r6, r1
 8000d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d90:	4614      	mov	r4, r2
 8000d92:	2900      	cmp	r1, #0
 8000d94:	461d      	mov	r5, r3
 8000d96:	b096      	sub	sp, #88	; 0x58
 8000d98:	da07      	bge.n	8000daa <__swhatbuf_r+0x22>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	602b      	str	r3, [r5, #0]
 8000d9e:	89b3      	ldrh	r3, [r6, #12]
 8000da0:	061a      	lsls	r2, r3, #24
 8000da2:	d410      	bmi.n	8000dc6 <__swhatbuf_r+0x3e>
 8000da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da8:	e00e      	b.n	8000dc8 <__swhatbuf_r+0x40>
 8000daa:	466a      	mov	r2, sp
 8000dac:	f000 f96c 	bl	8001088 <_fstat_r>
 8000db0:	2800      	cmp	r0, #0
 8000db2:	dbf2      	blt.n	8000d9a <__swhatbuf_r+0x12>
 8000db4:	9a01      	ldr	r2, [sp, #4]
 8000db6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000dba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000dbe:	425a      	negs	r2, r3
 8000dc0:	415a      	adcs	r2, r3
 8000dc2:	602a      	str	r2, [r5, #0]
 8000dc4:	e7ee      	b.n	8000da4 <__swhatbuf_r+0x1c>
 8000dc6:	2340      	movs	r3, #64	; 0x40
 8000dc8:	2000      	movs	r0, #0
 8000dca:	6023      	str	r3, [r4, #0]
 8000dcc:	b016      	add	sp, #88	; 0x58
 8000dce:	bd70      	pop	{r4, r5, r6, pc}

08000dd0 <__smakebuf_r>:
 8000dd0:	898b      	ldrh	r3, [r1, #12]
 8000dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dd4:	079d      	lsls	r5, r3, #30
 8000dd6:	4606      	mov	r6, r0
 8000dd8:	460c      	mov	r4, r1
 8000dda:	d507      	bpl.n	8000dec <__smakebuf_r+0x1c>
 8000ddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	6123      	str	r3, [r4, #16]
 8000de4:	2301      	movs	r3, #1
 8000de6:	6163      	str	r3, [r4, #20]
 8000de8:	b002      	add	sp, #8
 8000dea:	bd70      	pop	{r4, r5, r6, pc}
 8000dec:	466a      	mov	r2, sp
 8000dee:	ab01      	add	r3, sp, #4
 8000df0:	f7ff ffca 	bl	8000d88 <__swhatbuf_r>
 8000df4:	9900      	ldr	r1, [sp, #0]
 8000df6:	4605      	mov	r5, r0
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f000 f875 	bl	8000ee8 <_malloc_r>
 8000dfe:	b948      	cbnz	r0, 8000e14 <__smakebuf_r+0x44>
 8000e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e04:	059a      	lsls	r2, r3, #22
 8000e06:	d4ef      	bmi.n	8000de8 <__smakebuf_r+0x18>
 8000e08:	f023 0303 	bic.w	r3, r3, #3
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	81a3      	strh	r3, [r4, #12]
 8000e12:	e7e3      	b.n	8000ddc <__smakebuf_r+0xc>
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <__smakebuf_r+0x7c>)
 8000e16:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e18:	89a3      	ldrh	r3, [r4, #12]
 8000e1a:	6020      	str	r0, [r4, #0]
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	81a3      	strh	r3, [r4, #12]
 8000e22:	9b00      	ldr	r3, [sp, #0]
 8000e24:	6120      	str	r0, [r4, #16]
 8000e26:	6163      	str	r3, [r4, #20]
 8000e28:	9b01      	ldr	r3, [sp, #4]
 8000e2a:	b15b      	cbz	r3, 8000e44 <__smakebuf_r+0x74>
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e32:	f000 f93b 	bl	80010ac <_isatty_r>
 8000e36:	b128      	cbz	r0, 8000e44 <__smakebuf_r+0x74>
 8000e38:	89a3      	ldrh	r3, [r4, #12]
 8000e3a:	f023 0303 	bic.w	r3, r3, #3
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	81a3      	strh	r3, [r4, #12]
 8000e44:	89a0      	ldrh	r0, [r4, #12]
 8000e46:	4305      	orrs	r5, r0
 8000e48:	81a5      	strh	r5, [r4, #12]
 8000e4a:	e7cd      	b.n	8000de8 <__smakebuf_r+0x18>
 8000e4c:	08000be1 	.word	0x08000be1

08000e50 <_free_r>:
 8000e50:	b538      	push	{r3, r4, r5, lr}
 8000e52:	4605      	mov	r5, r0
 8000e54:	2900      	cmp	r1, #0
 8000e56:	d043      	beq.n	8000ee0 <_free_r+0x90>
 8000e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e5c:	1f0c      	subs	r4, r1, #4
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bfb8      	it	lt
 8000e62:	18e4      	addlt	r4, r4, r3
 8000e64:	f000 f944 	bl	80010f0 <__malloc_lock>
 8000e68:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <_free_r+0x94>)
 8000e6a:	6813      	ldr	r3, [r2, #0]
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	b933      	cbnz	r3, 8000e7e <_free_r+0x2e>
 8000e70:	6063      	str	r3, [r4, #4]
 8000e72:	6014      	str	r4, [r2, #0]
 8000e74:	4628      	mov	r0, r5
 8000e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e7a:	f000 b93f 	b.w	80010fc <__malloc_unlock>
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	d90a      	bls.n	8000e98 <_free_r+0x48>
 8000e82:	6821      	ldr	r1, [r4, #0]
 8000e84:	1862      	adds	r2, r4, r1
 8000e86:	4293      	cmp	r3, r2
 8000e88:	bf01      	itttt	eq
 8000e8a:	681a      	ldreq	r2, [r3, #0]
 8000e8c:	685b      	ldreq	r3, [r3, #4]
 8000e8e:	1852      	addeq	r2, r2, r1
 8000e90:	6022      	streq	r2, [r4, #0]
 8000e92:	6063      	str	r3, [r4, #4]
 8000e94:	6004      	str	r4, [r0, #0]
 8000e96:	e7ed      	b.n	8000e74 <_free_r+0x24>
 8000e98:	461a      	mov	r2, r3
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	b10b      	cbz	r3, 8000ea2 <_free_r+0x52>
 8000e9e:	42a3      	cmp	r3, r4
 8000ea0:	d9fa      	bls.n	8000e98 <_free_r+0x48>
 8000ea2:	6811      	ldr	r1, [r2, #0]
 8000ea4:	1850      	adds	r0, r2, r1
 8000ea6:	42a0      	cmp	r0, r4
 8000ea8:	d10b      	bne.n	8000ec2 <_free_r+0x72>
 8000eaa:	6820      	ldr	r0, [r4, #0]
 8000eac:	4401      	add	r1, r0
 8000eae:	1850      	adds	r0, r2, r1
 8000eb0:	4283      	cmp	r3, r0
 8000eb2:	6011      	str	r1, [r2, #0]
 8000eb4:	d1de      	bne.n	8000e74 <_free_r+0x24>
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	4401      	add	r1, r0
 8000ebc:	6011      	str	r1, [r2, #0]
 8000ebe:	6053      	str	r3, [r2, #4]
 8000ec0:	e7d8      	b.n	8000e74 <_free_r+0x24>
 8000ec2:	d902      	bls.n	8000eca <_free_r+0x7a>
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	602b      	str	r3, [r5, #0]
 8000ec8:	e7d4      	b.n	8000e74 <_free_r+0x24>
 8000eca:	6820      	ldr	r0, [r4, #0]
 8000ecc:	1821      	adds	r1, r4, r0
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	bf01      	itttt	eq
 8000ed2:	6819      	ldreq	r1, [r3, #0]
 8000ed4:	685b      	ldreq	r3, [r3, #4]
 8000ed6:	1809      	addeq	r1, r1, r0
 8000ed8:	6021      	streq	r1, [r4, #0]
 8000eda:	6063      	str	r3, [r4, #4]
 8000edc:	6054      	str	r4, [r2, #4]
 8000ede:	e7c9      	b.n	8000e74 <_free_r+0x24>
 8000ee0:	bd38      	pop	{r3, r4, r5, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000008c 	.word	0x2000008c

08000ee8 <_malloc_r>:
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	1ccd      	adds	r5, r1, #3
 8000eec:	f025 0503 	bic.w	r5, r5, #3
 8000ef0:	3508      	adds	r5, #8
 8000ef2:	2d0c      	cmp	r5, #12
 8000ef4:	bf38      	it	cc
 8000ef6:	250c      	movcc	r5, #12
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	4606      	mov	r6, r0
 8000efc:	db01      	blt.n	8000f02 <_malloc_r+0x1a>
 8000efe:	42a9      	cmp	r1, r5
 8000f00:	d903      	bls.n	8000f0a <_malloc_r+0x22>
 8000f02:	230c      	movs	r3, #12
 8000f04:	6033      	str	r3, [r6, #0]
 8000f06:	2000      	movs	r0, #0
 8000f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f0a:	f000 f8f1 	bl	80010f0 <__malloc_lock>
 8000f0e:	4921      	ldr	r1, [pc, #132]	; (8000f94 <_malloc_r+0xac>)
 8000f10:	680a      	ldr	r2, [r1, #0]
 8000f12:	4614      	mov	r4, r2
 8000f14:	b99c      	cbnz	r4, 8000f3e <_malloc_r+0x56>
 8000f16:	4f20      	ldr	r7, [pc, #128]	; (8000f98 <_malloc_r+0xb0>)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b923      	cbnz	r3, 8000f26 <_malloc_r+0x3e>
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	4630      	mov	r0, r6
 8000f20:	f000 f83c 	bl	8000f9c <_sbrk_r>
 8000f24:	6038      	str	r0, [r7, #0]
 8000f26:	4629      	mov	r1, r5
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f000 f837 	bl	8000f9c <_sbrk_r>
 8000f2e:	1c43      	adds	r3, r0, #1
 8000f30:	d123      	bne.n	8000f7a <_malloc_r+0x92>
 8000f32:	230c      	movs	r3, #12
 8000f34:	4630      	mov	r0, r6
 8000f36:	6033      	str	r3, [r6, #0]
 8000f38:	f000 f8e0 	bl	80010fc <__malloc_unlock>
 8000f3c:	e7e3      	b.n	8000f06 <_malloc_r+0x1e>
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	1b5b      	subs	r3, r3, r5
 8000f42:	d417      	bmi.n	8000f74 <_malloc_r+0x8c>
 8000f44:	2b0b      	cmp	r3, #11
 8000f46:	d903      	bls.n	8000f50 <_malloc_r+0x68>
 8000f48:	6023      	str	r3, [r4, #0]
 8000f4a:	441c      	add	r4, r3
 8000f4c:	6025      	str	r5, [r4, #0]
 8000f4e:	e004      	b.n	8000f5a <_malloc_r+0x72>
 8000f50:	6863      	ldr	r3, [r4, #4]
 8000f52:	42a2      	cmp	r2, r4
 8000f54:	bf0c      	ite	eq
 8000f56:	600b      	streq	r3, [r1, #0]
 8000f58:	6053      	strne	r3, [r2, #4]
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	f000 f8ce 	bl	80010fc <__malloc_unlock>
 8000f60:	f104 000b 	add.w	r0, r4, #11
 8000f64:	1d23      	adds	r3, r4, #4
 8000f66:	f020 0007 	bic.w	r0, r0, #7
 8000f6a:	1ac2      	subs	r2, r0, r3
 8000f6c:	d0cc      	beq.n	8000f08 <_malloc_r+0x20>
 8000f6e:	1a1b      	subs	r3, r3, r0
 8000f70:	50a3      	str	r3, [r4, r2]
 8000f72:	e7c9      	b.n	8000f08 <_malloc_r+0x20>
 8000f74:	4622      	mov	r2, r4
 8000f76:	6864      	ldr	r4, [r4, #4]
 8000f78:	e7cc      	b.n	8000f14 <_malloc_r+0x2c>
 8000f7a:	1cc4      	adds	r4, r0, #3
 8000f7c:	f024 0403 	bic.w	r4, r4, #3
 8000f80:	42a0      	cmp	r0, r4
 8000f82:	d0e3      	beq.n	8000f4c <_malloc_r+0x64>
 8000f84:	1a21      	subs	r1, r4, r0
 8000f86:	4630      	mov	r0, r6
 8000f88:	f000 f808 	bl	8000f9c <_sbrk_r>
 8000f8c:	3001      	adds	r0, #1
 8000f8e:	d1dd      	bne.n	8000f4c <_malloc_r+0x64>
 8000f90:	e7cf      	b.n	8000f32 <_malloc_r+0x4a>
 8000f92:	bf00      	nop
 8000f94:	2000008c 	.word	0x2000008c
 8000f98:	20000090 	.word	0x20000090

08000f9c <_sbrk_r>:
 8000f9c:	b538      	push	{r3, r4, r5, lr}
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	4d05      	ldr	r5, [pc, #20]	; (8000fb8 <_sbrk_r+0x1c>)
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	602b      	str	r3, [r5, #0]
 8000fa8:	f7ff fb6c 	bl	8000684 <_sbrk>
 8000fac:	1c43      	adds	r3, r0, #1
 8000fae:	d102      	bne.n	8000fb6 <_sbrk_r+0x1a>
 8000fb0:	682b      	ldr	r3, [r5, #0]
 8000fb2:	b103      	cbz	r3, 8000fb6 <_sbrk_r+0x1a>
 8000fb4:	6023      	str	r3, [r4, #0]
 8000fb6:	bd38      	pop	{r3, r4, r5, pc}
 8000fb8:	200000f0 	.word	0x200000f0

08000fbc <__sread>:
 8000fbc:	b510      	push	{r4, lr}
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fc4:	f000 f8a0 	bl	8001108 <_read_r>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	bfab      	itete	ge
 8000fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fce:	89a3      	ldrhlt	r3, [r4, #12]
 8000fd0:	181b      	addge	r3, r3, r0
 8000fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fd6:	bfac      	ite	ge
 8000fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fda:	81a3      	strhlt	r3, [r4, #12]
 8000fdc:	bd10      	pop	{r4, pc}

08000fde <__swrite>:
 8000fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe2:	461f      	mov	r7, r3
 8000fe4:	898b      	ldrh	r3, [r1, #12]
 8000fe6:	4605      	mov	r5, r0
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	460c      	mov	r4, r1
 8000fec:	4616      	mov	r6, r2
 8000fee:	d505      	bpl.n	8000ffc <__swrite+0x1e>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ff8:	f000 f868 	bl	80010cc <_lseek_r>
 8000ffc:	89a3      	ldrh	r3, [r4, #12]
 8000ffe:	4632      	mov	r2, r6
 8001000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001004:	81a3      	strh	r3, [r4, #12]
 8001006:	4628      	mov	r0, r5
 8001008:	463b      	mov	r3, r7
 800100a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800100e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001012:	f000 b817 	b.w	8001044 <_write_r>

08001016 <__sseek>:
 8001016:	b510      	push	{r4, lr}
 8001018:	460c      	mov	r4, r1
 800101a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800101e:	f000 f855 	bl	80010cc <_lseek_r>
 8001022:	1c43      	adds	r3, r0, #1
 8001024:	89a3      	ldrh	r3, [r4, #12]
 8001026:	bf15      	itete	ne
 8001028:	6560      	strne	r0, [r4, #84]	; 0x54
 800102a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800102e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001032:	81a3      	strheq	r3, [r4, #12]
 8001034:	bf18      	it	ne
 8001036:	81a3      	strhne	r3, [r4, #12]
 8001038:	bd10      	pop	{r4, pc}

0800103a <__sclose>:
 800103a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800103e:	f000 b813 	b.w	8001068 <_close_r>
	...

08001044 <_write_r>:
 8001044:	b538      	push	{r3, r4, r5, lr}
 8001046:	4604      	mov	r4, r0
 8001048:	4608      	mov	r0, r1
 800104a:	4611      	mov	r1, r2
 800104c:	2200      	movs	r2, #0
 800104e:	4d05      	ldr	r5, [pc, #20]	; (8001064 <_write_r+0x20>)
 8001050:	602a      	str	r2, [r5, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	f7ff fac9 	bl	80005ea <_write>
 8001058:	1c43      	adds	r3, r0, #1
 800105a:	d102      	bne.n	8001062 <_write_r+0x1e>
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	b103      	cbz	r3, 8001062 <_write_r+0x1e>
 8001060:	6023      	str	r3, [r4, #0]
 8001062:	bd38      	pop	{r3, r4, r5, pc}
 8001064:	200000f0 	.word	0x200000f0

08001068 <_close_r>:
 8001068:	b538      	push	{r3, r4, r5, lr}
 800106a:	2300      	movs	r3, #0
 800106c:	4d05      	ldr	r5, [pc, #20]	; (8001084 <_close_r+0x1c>)
 800106e:	4604      	mov	r4, r0
 8001070:	4608      	mov	r0, r1
 8001072:	602b      	str	r3, [r5, #0]
 8001074:	f7ff fad5 	bl	8000622 <_close>
 8001078:	1c43      	adds	r3, r0, #1
 800107a:	d102      	bne.n	8001082 <_close_r+0x1a>
 800107c:	682b      	ldr	r3, [r5, #0]
 800107e:	b103      	cbz	r3, 8001082 <_close_r+0x1a>
 8001080:	6023      	str	r3, [r4, #0]
 8001082:	bd38      	pop	{r3, r4, r5, pc}
 8001084:	200000f0 	.word	0x200000f0

08001088 <_fstat_r>:
 8001088:	b538      	push	{r3, r4, r5, lr}
 800108a:	2300      	movs	r3, #0
 800108c:	4d06      	ldr	r5, [pc, #24]	; (80010a8 <_fstat_r+0x20>)
 800108e:	4604      	mov	r4, r0
 8001090:	4608      	mov	r0, r1
 8001092:	4611      	mov	r1, r2
 8001094:	602b      	str	r3, [r5, #0]
 8001096:	f7ff facf 	bl	8000638 <_fstat>
 800109a:	1c43      	adds	r3, r0, #1
 800109c:	d102      	bne.n	80010a4 <_fstat_r+0x1c>
 800109e:	682b      	ldr	r3, [r5, #0]
 80010a0:	b103      	cbz	r3, 80010a4 <_fstat_r+0x1c>
 80010a2:	6023      	str	r3, [r4, #0]
 80010a4:	bd38      	pop	{r3, r4, r5, pc}
 80010a6:	bf00      	nop
 80010a8:	200000f0 	.word	0x200000f0

080010ac <_isatty_r>:
 80010ac:	b538      	push	{r3, r4, r5, lr}
 80010ae:	2300      	movs	r3, #0
 80010b0:	4d05      	ldr	r5, [pc, #20]	; (80010c8 <_isatty_r+0x1c>)
 80010b2:	4604      	mov	r4, r0
 80010b4:	4608      	mov	r0, r1
 80010b6:	602b      	str	r3, [r5, #0]
 80010b8:	f7ff facd 	bl	8000656 <_isatty>
 80010bc:	1c43      	adds	r3, r0, #1
 80010be:	d102      	bne.n	80010c6 <_isatty_r+0x1a>
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	b103      	cbz	r3, 80010c6 <_isatty_r+0x1a>
 80010c4:	6023      	str	r3, [r4, #0]
 80010c6:	bd38      	pop	{r3, r4, r5, pc}
 80010c8:	200000f0 	.word	0x200000f0

080010cc <_lseek_r>:
 80010cc:	b538      	push	{r3, r4, r5, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	2200      	movs	r2, #0
 80010d6:	4d05      	ldr	r5, [pc, #20]	; (80010ec <_lseek_r+0x20>)
 80010d8:	602a      	str	r2, [r5, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	f7ff fac5 	bl	800066a <_lseek>
 80010e0:	1c43      	adds	r3, r0, #1
 80010e2:	d102      	bne.n	80010ea <_lseek_r+0x1e>
 80010e4:	682b      	ldr	r3, [r5, #0]
 80010e6:	b103      	cbz	r3, 80010ea <_lseek_r+0x1e>
 80010e8:	6023      	str	r3, [r4, #0]
 80010ea:	bd38      	pop	{r3, r4, r5, pc}
 80010ec:	200000f0 	.word	0x200000f0

080010f0 <__malloc_lock>:
 80010f0:	4801      	ldr	r0, [pc, #4]	; (80010f8 <__malloc_lock+0x8>)
 80010f2:	f7ff be47 	b.w	8000d84 <__retarget_lock_acquire_recursive>
 80010f6:	bf00      	nop
 80010f8:	200000e8 	.word	0x200000e8

080010fc <__malloc_unlock>:
 80010fc:	4801      	ldr	r0, [pc, #4]	; (8001104 <__malloc_unlock+0x8>)
 80010fe:	f7ff be42 	b.w	8000d86 <__retarget_lock_release_recursive>
 8001102:	bf00      	nop
 8001104:	200000e8 	.word	0x200000e8

08001108 <_read_r>:
 8001108:	b538      	push	{r3, r4, r5, lr}
 800110a:	4604      	mov	r4, r0
 800110c:	4608      	mov	r0, r1
 800110e:	4611      	mov	r1, r2
 8001110:	2200      	movs	r2, #0
 8001112:	4d05      	ldr	r5, [pc, #20]	; (8001128 <_read_r+0x20>)
 8001114:	602a      	str	r2, [r5, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	f7ff fa4a 	bl	80005b0 <_read>
 800111c:	1c43      	adds	r3, r0, #1
 800111e:	d102      	bne.n	8001126 <_read_r+0x1e>
 8001120:	682b      	ldr	r3, [r5, #0]
 8001122:	b103      	cbz	r3, 8001126 <_read_r+0x1e>
 8001124:	6023      	str	r3, [r4, #0]
 8001126:	bd38      	pop	{r3, r4, r5, pc}
 8001128:	200000f0 	.word	0x200000f0

0800112c <_init>:
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	bf00      	nop
 8001130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001132:	bc08      	pop	{r3}
 8001134:	469e      	mov	lr, r3
 8001136:	4770      	bx	lr

08001138 <_fini>:
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	bf00      	nop
 800113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113e:	bc08      	pop	{r3}
 8001140:	469e      	mov	lr, r3
 8001142:	4770      	bx	lr
